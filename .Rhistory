pwd
getwd
getwd()
load(file = "Gardner_rpkm.rda")
rpkm <- load(file = "Gardner_rpkm.rda")
View(hg19_design)
rpkm
View(hg19_design)
View(hg19_design)
View(x)
load(file = "Gardner_table_aggMean.rda")
x_mean
View(x_mean)
#random data that follow an 3-rank NMF model (with quite some noise: sd=2)
X <- syntheticNMF(100, 3, 20, noise=2)
#random data that follow an 3-rank NMF model (with quite some noise: sd=2)
X <- syntheticNMF(100, 3, 20, noise=2)
library(NMF)
#random data that follow an 3-rank NMF model (with quite some noise: sd=2)
X <- syntheticNMF(100, 3, 20, noise=2)
# row annotations and covariates
n <- nrow(X)
d <- rnorm(n)
e <- unlist(mapply(rep, c('X', 'Y', 'Z'), 10))
e <- c(e, rep(NA, n-length(e)))
rdata <- data.frame(Var=d, Type=e)
# column annotations and covariates
p <- ncol(X)
a <- sample(c('alpha', 'beta', 'gamma'), p, replace=TRUE)
# define covariates: true groups and some numeric variable
c <- rnorm(p)
# gather them in a data.frame
covariates <- data.frame(a, X$pData, c)
par(mfrow=c(1,2))
aheatmap(X, annCol = covariates, annRow = X$fData)
aheatmap(X, annCol = covariates, annRow = X$fData)
aheatmap(X, annCol = covariates, annRow = X$fData)
aheatmap(X, annCol = covariates, annRow = X$fData)
install.packages("pheatmap")
pheatmap(X, annCol = covariates, annRow = X$fData)
library(pheatmap)
pheatmap(X, annCol = covariates, annRow = X$fData)
pheatmap(X)
aheatmap(X, annCol = covariates, annRow = X$fData)
png("NMF_test.png")
aheatmap(X, annCol = covariates, annRow = X$fData)
dev.off()
?par
?mfrow
?read.delim
#read RNAseq data
read.delim("Gardner_rpkm.rda")
getwd()
#read RNAseq data
load(file = "Gardner_rpkm.rda")
rnaseq <- as.data.frame(x)
View(rnaseq)
head(rnaseq)
dim(rnaseq)
View(rnaseq)
colnames(rnaseq)
plotMDS(rnaseq)
install.packages("edgeR")
nmf
nmf
?nmf
vignette('NMF')
for(ik in c(2:7))
{
use.this.k <- ik
res <- nmf(rnaseq, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
?rowSums
#remove rows with 0s
rnaseq1 <- rnaseq[rowSums(rnaseq[, -1])>0, ]
View(rnaseq1)
a <- 1:9
a[1]
a[-1]
1[-2]
a[-2]
a1 <- a[-1]
a
a1
?rowSums
?dim
dim(a) <- c(3,3)
a
a[1,2]
a[a[1]]
a[a[2]]
a1 <- 1:9
a1
a1[a1[3]]
a1 <- 1, 4, 5, 7, 8, 9, 10
a1 <- c(1, 4, 5, 7, 8, 9, 10)
a1
a1[a1[2]]
a
a[1]
a[1,]
a[a[ ,1]]
a[c(1,2,3)]
rowSus(a[,1])
rowSums(a[,1])
rowSums(a)
a
a[rowSums(a[ ,1])]
a[rowSums(a[ ,1])>0,]
rowSums(a[,-1])
rowSums(a[,-2])
rowSums(a[,2])
rowSums(a[,])
View(rnaseq1)
rna_test <- rowSums(rnaseq[, -1])
dim(rnaseq)
head(rna_test)
rna_test1 <- rowSums(rnaseq[, ])
head(rna_test)
rna_test == rna_test1
head(rna_test1)
head(rna_test)
WASH7P <- rnaseq["WASH7P", ]
head(WASH7P)
#remove rows with 0s
rnaseq1 <- rnaseq[rowSums(rnaseq[ , ])>0, ]
#remove rows with 0s
rnaseq1 <- rnaseq[rowSums(rnaseq[ ,-1])>0, ]
#remove rows with 0s
rnaseq1 <- rnaseq[rowSums(rnaseq[ ,])>0, ]
rnaseq2 <- rnaseq[rowSums(rnaseq[ , -1])>0, ]
#remove rows with 0s
rnaseq1 <- rnaseq[rowSums(rnaseq[ , -1])>0, ]
rnaseq2 <- rnaseq[rowSums(rnaseq[ , ])>0, ]
#remove rows with 0s
rnaseq1 <- rnaseq[rowSums(rnaseq[ , ])>0, ]
a
#remove rows with 0s
rnaseq1 <- rnaseq[rowSums(rnaseq)>0, ]
a[rowSums(a)]
a
a[rowSums(a)>5,]
a[rowSums(a)>0,]
a[rowSums(a)>12,]
a[rowSums(a)>15,]
a[rowSums(a)>20,]
a[rowSums(a)>0,]
?rbind
b <- c(0,0,0)
a <- rbind(b)
a
a <- c(1:9)
dim(a) <- c(1,3)
dim(a) <- c(3,3)
a
a <- rbind(a, b)
a
a[4,4]
a[3,3]
a[3,4]
a[4,3]
a[rowSums(a)>0]
a[rowSums(a)>0,]
a[rowSums(a)>-1,]
a[rowSums(a)>0,]
for(ik in c(2:7))
{
use.this.k <- ik
res <- nmf(rnaseq1, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
for(ik in c(2:7))
{
use.this.k <- ik
res <- nmf(rnaseq1, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
hm
#NMF data
png("NMF_rudin.png")
for(ik in c(2:7))
{
use.this.k <- ik
res <- nmf(rnaseq1, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
#NMF data
png("NMF_rudin.png")
for(ik in c(2:7))
{
use.this.k <- ik
res <- nmf(rnaseq1, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
CTNNB1 <- rnaseq['CTNNB1', ]
View(CTNNB1)
MYCL <- rnaseq['MYCL', ]
View(MYCL)
WNT <- rnaseq['WNT9', ]
wNT
View(WNT)
View(rnaseq)
View(rnaseq1)
View(rnaseq1)
install.extras('NMF')
par("mar")
?par
par(mar=c(1,1,1,1))
plot(estim.r)
#read RNAseq data
load(file = "Gardner_rpkm.rda")
# convert matrix to dataframe
rnaseq <- as.data.frame(x)
#remove rows with only 0s
rnaseq1 <- rnaseq[rowSums(rnaseq)>0, ]
for(ik in c(2:7))
#NMF data
png("NMF_rudin.png")
{
use.this.k <- ik
res <- nmf(rnaseq1, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
dev.off()
estim.r <- nmf(rnaseq, 2:7, nrun=50, seed=123456)
plot(estim.r)
View(hm)
estim.r <- nmf(rnaseq, 2:7, nrun=50, seed=123456)
# convert matrix to dataframe
rnaseq <- as.data.frame(x)
#remove rows with only 0s
rnaseq1 <- rnaseq[rowSums(rnaseq)>0, ]
estim.r <- nmf(rnaseq1, 2:7, nrun=50, seed=123456)
estim.r <- nmf(rnaseq1, 2:7, nrun=50, seed=123456)
esim.r
hm
hm
plot(hm)
res
{
use.this.k <- ik
res <- nmf(rnaseq1, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
estim.r <- nmf(rnaseq1, 2:7, nrun=1, seed=123456)
hm
estim.r <- nmf(rnaseq1, 2:7, nrun=1, seed=123456)
estim.r <- nmf(rnaseq1, 2:7, nrun=1, seed=123456)
?nmf
nmfAlgorithm()
nmfAlgorithm('brunet')
estim.r <- nmf(rnaseq1, 2:7, nrun=1, seed=123456)
hm
View(hm)
library(NMF)
library(pheatmap)
#random data that follow an 3-rank NMF model (with quite some noise: sd=2)
X <- syntheticNMF(100, 3, 20, noise=2)
# row annotations and covariates
n <- nrow(X)
d <- rnorm(n)
e <- unlist(mapply(rep, c('X', 'Y', 'Z'), 10))
e <- c(e, rep(NA, n-length(e)))
rdata <- data.frame(Var=d, Type=e)
# column annotations and covariates
p <- ncol(X)
a <- sample(c('alpha', 'beta', 'gamma'), p, replace=TRUE)
# define covariates: true groups and some numeric variable
c <- rnorm(p)
# gather them in a data.frame
covariates <- data.frame(a, X$pData, c)
par(mfrow=c(1,2))
png("NMF_test.png")
aheatmap(X, annCol = covariates, annRow = X$fData)
dev.off()
aheatmap(X)
res <- nmf(X, 3, nrun=10)
aheatmap(X)
plot(cars)
aheatmap(X)
par(mfrow=c(2,2))
aheatmap(X)
plot(cars)
aheatmap(X)
aheatmap(X)
aheatmap(hm)
aheatmap(hm)
aheatmap(X)
aheatmap(X)
plot(X)
plot(estim.r)
#NMF data
png("NMF_rudin.png")
#NMF data
png("NMF_rudin(1).png")
for(ik in c(2:7))
{
use.this.k <- ik
res <- nmf(rnaseq1, use.this.k, nrun=200 ,.options='vt')
hm <- consensusmap(res)
}
View(res)
summary(rnaseq1)
len(rnaseq1)
find.package('rj')
getwd()
rm(list=ls())
brewer.pal.info
library(RColorBrewer)
brewer.pal.info
pal <- colorRamp(c("red", "blue"))
pal
pal(0)
pal(0.5) # can pass any value between 0 and 1 to pal() function
pal(seq(0, 1, len = 10)) # can also pass sequence of numbers to pal() function
pal <- colorRampPalette(c("red", "yellow"))
pal(2) # just returns two colors: yellow and red
brewer.pal(4, "Set1")
setwd("/Users/benson/R_programming/R_hmap_test")
George <- read.csv("George_nodup.csv")
head(George)
rownames(George) <- George$X
George <- George[ , -1]
getwd()
setwd("/Users/benson/R_programming/R_hmap_test")
getwd()
mGenes = c("ASCL1", "NEUROD1", "YAP1", "POU2F3")
subtypeData <- function(counts, markerGene) { # create function for counts and genes of interest
mcounts <- subset(counts, subset = rownames(counts) %in% markerGene ) # make matrix of markers of interest
r_index <- sapply(mcounts, which.max) # use sapply to find highest max value from marker genes
hgenes <- rownames(mcounts)[r_index] # use rownames to index the name of gene that is highest
scounts <- rbind.data.frame(hgenes, counts) # generate dataframe by binding the rows from each "matrix"
return(scounts)
}
sGeorge <- subtypeData(counts = George, markerGene = mGenes)
# to count how many subtypes in this dataset
library(dplyr)
subtypes <- sGeorge[1, ]
rownames(subtypes) = "subtype"
occurences <- table(unlist(subtypes)) # unlist dataframe to character vector, use table() to count occurences
as.matrix(occurences)
# plot a pie chart from the different subtypes
slices <- occurences
lbls <- rownames(occurences)
percent <- round(slices/sum(slices) * 100)
lbls <- paste(lbls, percent)
lbls <- paste(lbls, "%", sep = " ") # add % to the labels
pcolour <- brewer.pal(4, "Set1")
George.pie <- pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
pdf("SCLC.George.Dataset_subtype_distribution.pdf", width = 8, height = 5)
grid::grid.newpage()
grid::grid.draw(George.pie)
dev.off()
pcolour <- colorRampPalette(brewer.pal(4, "Set1"))(4)
George.pie <- pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
pdf("SCLC.George.Dataset_subtype_distribution.pdf", width = 8, height = 5)
grid::grid.newpage()
grid::grid.draw(George.pie)
dev.off()
while (!is.null(dev.list()))  dev.off()
George.pie <- pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
pdf("SCLC.George.Dataset_subtype_distribution.pdf", width = 8, height = 5)
grid::grid.newpage()
grid::grid.draw(George.pie)
while (!is.null(dev.list()))  dev.off()
while (!is.null(dev.list()))  dev.off()
dev.off()
getwd()
setwd("/Users/benson/R_programming/RJourney")
getwd()
George.pie <- pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
pdf("SCLC.George.Dataset_subtype_distribution.pdf", width = 8, height = 5)
grid::grid.newpage()
grid::grid.draw(George.pie)
while (!is.null(dev.list()))  dev.off()
dev.off()
getwd()
George.pie <- pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
pdf("SCLC.George.Dataset_subtype_distribution.pdf", width = 8, height = 5)
grid::grid.newpage()
grid::grid.draw(George.pie)
dev.off()
dev.new()
pdf("SCLC.George.Dataset_subtype_distribution.pdf", width = 8, height = 5)
grid::grid.newpage()
grid::grid.draw(George.pie)
dev.off()
George.pie <- pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
dev.new()
png("SCLC.George.Dataset_subtype_distribution.png", width = 8, height = 5)
grid::grid.newpage()
grid::grid.draw(George.pie)
dev.off()
George.pie
George.pie <- pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
dev.new()
pdf("SCLC.George.Dataset_subtype_distribution.pdf", width = 8, height = 5)
pie(slices, labels = lbls, col = pcolour, main = "Subtype Distribution of George dataset")
dev.off()
